{:title "What sucks about Clojure... and why you'll love it anyway"
 :layout :post
 :tags  ["clojure"]
 :toc false
}

== https://youtu.be/wXgdxCFDjD0[Youtube Link]

=== *Speaker*
Chas Emerick, Clojure core contributor and many libraries

=== *Thoughts*

I like the idea of reading the source code of your
programming language. You learn a lot of idioms about how to
write good code.

The bus factor of Clojure being 1 is very concerning from an
Enterprise point of view and maybe that's the reason why
people cannot rely on very large commitment. But, I sort of
agree that the language itself must have some curators with
good vision about the future of the project.

However, I think it should pay the price for these curators
to invest in the community and find more people aligned with
ideas in order to evolve the language several step forward.


=== *Quotes*

The world is often unkind to new talent, new creations. The new needs friends

No way to build namespaces incrementally: "Make namespace X
have the same aliases/refers/imports as Y, plus ..."

All namespace operations are risky and side-effecting. If
only loading code was transactional.

declare, does not work, because we don't have a way to do
forward reference.

You will read Clojure's source

Macros are hard to compose, but they're rarely what you want

Over-enthusiasm: Clojure Everywhere

The ideas in Clojure & their composition are more important
than any particular implementation.

=== *Recommendations*

1. https://dzone.com/articles/your-favorite-programming[Your favorite programming language is not good enough]
2. Prefer to not use dynamic scope if possible
3. Using STM (effectively) is hard
4. You should go and read the clojure.core namespace
5. Take care with "big ball of muds" when writing composable functions in lazy sequences.
6. Crossing the Chasm(s)