{:title "Prioritizing Technical Debt as if Time and Money Matters"
 :layout :post
 :tags  ["ddd", "design", "maintainability"]
 :toc false
}

== https://youtu.be/KV75YcFoWTo?list=PLC63ae3uCHHYZ2hb_pc6VlQabpi1DS7Yf[Youtube Link]

=== *Speaker*
Adam Tornhill, developer and author of some books, including Your Code as a Crime Scene

=== *Thoughts*

Nice presentation!!! Full of case-study and DATA! Data to
corroborate your hypothesis about how code evolve. I'm still
digesting some of the content of the video, but I already
subcribed to the CodeScene service for some of my public
github repositories.

Fantastic. I am analysing my Emacs dotfiles that I have been
mantaining for a while. Pretty interesting and
counter-intuitive results there about hotspot.

I would like to point out that he stated based on a research
report that "old-code is much likely to have fewer bugs than
new ones that implemented some similar solution" and that is
fantastic counterpoint to Chad Fowler's idea to code as a
disposable artifact.

Fowler even mention that "you might think, that code that no
one needs to touch is good code. But, are you sure?"


=== *Quotes*

Lehman's laws of software evolution:

1. a system must be continually adapter or it becomes
progressively less satisfactory

2. as a system evolves, its complexity increases unless work
is done to maintain or reduce it


What behaviour do we reinforce by quantifying technical debt?

Code findings problems that might add to complexity:

1. *low cohesion*, many responsibilities
2. *overral complex methods*, many conditionals
3. *deeply nested logic*, if-statements, inside if-statements
4. *primitive obsession*, missing a domain language
5. *excess function arguments*, missing abstractions

Legacy Code:

1. lacks in quality, and that
2. we didn't write ourselves

Social factors influence how we perceive a codebase

In microservice architectures, the most important aspects
are not properties of the code but properties of the system

=== *Recomendations*

1. Complexity metrics are not good for measure it. Therefore, pick whatever you want
2. These metrics are not the most principle point here
3. We should never go for a refactor so big
4. Your Best Bug Fix is Time
5. Old code is better than the new code

=== *Books*

1. https://leanpub.com/lispweb[Lisp for the Web]
2. https://www.amazon.com/Software-Design-X-Rays-Technical-Behavioral/dp/1680502727/ref=sr_1_1?crid=QAJCT54O5FYU&keywords=software+design+x-rays&qid=1578227454&sprefix=Software+Design+X-Rays%2Caps%2C370&sr=8-1p[Software Design X-Rays]
3. https://www.amazon.com/Your-Code-Crime-Scene-Bottlenecks/dp/1680500384/ref=sr_1_1?qid=1578227674&refinements=p_27%3AAdam+Tornhill&s=books&sr=1-1&text=Adam+Tornhill[Your code as a Crime Scene]

=== *Papers*

1. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.116.3108&rep=rep1&type=pdf[Programs, life cycles, and laws of software evolution]
