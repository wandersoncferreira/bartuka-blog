{:title "Test-driven development: Write better code in less time"
 :layout :post
 :tags  ["testing"]
 :toc false
}

== https://youtu.be/HhwElTL-mdI[Youtube Link]

=== *Speaker*
Evan Dorn, Lead Developer at Honey

=== *Thoughts*

Same content as every other talk about TDD that I have
watched. Do it, become good at it, it takes a while and it
pays off, you must do TDD or you are not a professional,
etc.

I'm not saying that I don't want a system fully tested. I
would love to know if I broke my system at any point in
time beforehand.

=== *Quotes*

Intelligence is a liability. Smart people can make
**progress** without **process**. This is NOT a good thing.

Process is the difference between: **software engineering** and **programming**

3. Tests provides:
  .. Documentation of code
  .. Catch future errors
  .. Long-term time savings

4. TDD defined:
  .. Decided what the code will do
  .. Write a test that will pass if the code does that thing
  .. Run the test, see it fail
  .. Write the code
  .. Run the test, see it pass

=== *Recommendations*

1. Professionals: design, plan, and prepare first... then do the work
2. Software process: architecture, conventions & standards, version control, coordination [agile], test-driven development
3. Some things are too hard to test
4. Some tests are too trivial to be useful
5. Intelligence is asset
6. Overtesting is possible
7. Exploratory coding w/o tests is OK!