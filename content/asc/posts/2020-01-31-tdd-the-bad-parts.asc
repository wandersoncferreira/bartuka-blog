{:title "TDD: The bad parts"
 :layout :post
 :tags  ["testing"]
 :toc false
}

== https://youtu.be/xPL84vvLwXA[Youtube Link]

=== *Speaker*
Matt Parker, software developer at Pivotal

=== *Thoughts*

No more to add.

As he said, "do not kill your company with TDD" and most of
the arguments that people use it to describe TDD seems like
to me that they are attached to this lovely notion of
*Problem #3*.


=== *Quotes*

*Problem #1*: Outside-in BDD - Start at the outside of what you want to discover - Joseph Wilk

*Problem #2*: Mocking

*Problem #3*: Unit testing

Three laws of  *robotics* tdd:

.. You are not allowed to write any production code unless it is to make a failing unit test pass

.. You are not allowed to write any more of a unit test than is sufficient to fail

.. You are not allowed to write any more production code than is sufficient to pass the one failing unit test


"Every public method of every class should be paired with a well-design unit test" (sic) <- *this is the problem!! whole misinterpretation*

"Every *behavior* should be paired with a well-design unit test" (sic)

=== *Recommendations*

1. TDD is not a goal. The goal is "go fast forever"
2. To go fast, you need clean code
3. Refactoring should be a practice
4. "Doing the work is the best practice to discover the work that must be done"
5. Outside != GUI
6. Stop test implementations, you should test behavior
7. Avoid test coupling caused by a misunderstanding of *Problem #3*

=== *Blogs*

1. https://blog.cleancoder.com/uncle-bob/2014/05/14/TheLittleMocker.html[The Little Mocker] - by Robert C. Martin
2. http://moonmaster9000.github.io/hexagonal_tdd_in_ruby/[Hexagonal TDD in Ruby] - Screencast
3. https://www.youtube.com/watch?v=4Y0tOi7QWqM[Software that fits in your head] - by Dan North