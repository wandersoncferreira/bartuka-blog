{:title "Software that fits in your head"
 :layout :post
 :tags  ["design"]
 :toc false
}

== https://youtu.be/4Y0tOi7QWqM[Youtube Link]

=== *Speaker*
Dan North, Developer, Originator of BDD

=== *Thoughts*

"Software is not the point, business impact is the point." (sic)

I like his point and whole community around BDD, but I also
like to be a *programmer* and craft stuff just for the sake
of it. But I realized that we need to understand the context
we are in and adapt to it. For example, I have a discussion
about a feature addition to a open source library that has
been going on for more than 20 days. Very nice and educative
for me, but I cannot to the same thing in a startup trying
to find its place in the world.

I like the analogy of mocks and painkillers haha. That nice
framework you have is just free access to drugs and you
can't realize how bad is what you are doing.

"As far I have 4 programmers, I have 8 dialects of Scala."

=== *Quotes*

What is the goal of software development? *sustainably
minimize lead time* to deliver business impact.

Code is not the asset, code is the cost!

.. *writing* code cost
.. *waiting* for code cost
.. *changing* code cost
.. *understanding* code cost

Objects in OOP does not model real world things, they are
little computers. The real world is modelled with entities.

=== *Recommendations*

1. The goal is *not* to *produce software*
2. Short software half-life:
.. write discrete components
.. define components boundaries
.. define component purpose
.. define component responsibility

3. optimize for replaceability - I'm not using library that will glue-components together
4. expect to invest in stabilising
5. build a stable team
6. I can't reason about something that is bigger than my head (sic)
7. We want consistency between codebase
8. Replaceable Component Architecture
9. Microservices *can be* a Repleceable Component Architecture if you choose to optimise for replaceability and consistency
10. **smaller** is not necessarily better, more *repleceable* is better
11. *KILL CODE FEARLESSLY!*

=== *Blogs*

1. http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions[Documenting Architecture Decisions] - by Michael Nygard
2. https://github.com/joelparkerhenderson/architecture_decision_record/blob/master/adr_template_by_michael_nygard.md[ADR Template] - by Michael Nygard