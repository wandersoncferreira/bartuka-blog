{:title "Back to Basics: Object-Oriented Programming"
 :layout :post
 :tags  ["c++", "programming"]
 :toc false
}


== https://youtu.be/32tDTD9UJCE[Youtube Link]

=== *Speaker*
Jon Kalb, Software Instructor

=== *Thoughts*

I've being trying to find good modern material about OOP
it's very difficult. I *imagine* that OOP has some good
lesons about modularity and composition that might be very
good to really master and to apply in different contexts. I
noticed that OOP depends a lot on the community behind it, I
could not find many good *same* principles from Java, C++
and Ruby comminuties. But I am still studying and trying to
understand polymorphism better.


=== *Definitions*

OOP: a programming paradigm in C++ using polymorphism based
on runtime function dispatch using virtual functions

=== *Quotes*

After the base class guarantees the preconditions and
postconditions of an operation, any derived class must
respect those guarantess. An override can ask for *less* and
provide *more*, but it must never require more or promise
less because that would break the contract that was promised
to calling code.


=== *Books*
1. https://www.amazon.com/Coding-Standards-Rules-Guidelines-Practices/dp/0321113586[From C++ Coding Standards]
2. https://www.amazon.com/Effective-Specific-Improve-Programs-Designs/dp/0321334876/ref=sr_1_1?keywords=effective+c%2B%2B&qid=1577292173&s=books&sr=1-1[Effective C++: 55 specific ways to improve your programs and designs]

=== *Recommendations*
1. Why are so many developers hating on Object-Oriented Programming?
2. Make every class in your hierarchy either a base-only or leaf-only
3. Give one entity one cohesive responsibility
4. Use OOP to model "is-a" relationships, not for code-reuse
