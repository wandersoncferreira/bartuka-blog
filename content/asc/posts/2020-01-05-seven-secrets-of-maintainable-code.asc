{:title "Seven secrets of maintainable codebases"
 :layout :post
 :tags  ["software", "maintainability"]
 :toc false
}

== https://youtu.be/0oDporwhToQ[Youtube Link]

=== *Speaker*
Adam Tornhill, developer and author of some books, including Your Code as a Crime Scene

=== *Thoughts*

I really believe that fun is a amazing driver for overcoming
challenges. I can say for myself, I programmed in Python for
3 years and I had never read any book specific for learning
its dialect.

I learned by practice with mentors, good ones, but my
motivation was not at all towards the language
itself. During that time, I played around with Elisp, SML,
Ruby, Scheme, Scala, Golang and some others. But never made
a serious committement to it.

Clojure on the other side, I am two years in a row digging
it deep and I feel that I just started.

=== *Quotes*

0. Maintainable code goes beyond technology
1. All code is equal, but some Code is more equal than others
2. Complexity isn't the problem
3. Your brain is not your friend
4. Know your change patterns
5. Organization problems are mistaken as technical issues
6. Find your bling spots
7. Make it fun

You don't see wich your eyes, you see with your brain.

People complaining a lot most of time are biasing some
decisions of what is going on for real

Temporal coupling: Code that changes together over time. It
is measured from the evolution of your code, not by
dependency inside the code.


The number of developers touching the same code, is a good
measure about quality problems

Immutable design: when many people working in parallel in
the same code, therefore you can't change it.

Fun is virtually a guarantee that things gets done!

=== *Recomendations*

1. You need a holistic view of the system
2. PLEASE, support your decisions with data
3. In Microservices, loose coupling is king
4. I picked Clojure because I wanted to learn a language. It looked fun!


=== *Links*

1. https://www.youtube.com/watch?v=uiJycy6dFSQ[Scala Collections: Why not?]