{:title "Predictably Fast Clojure"
 :layout :post
 :tags  ["clojure", "performance"]
 :toc false
}

== https://youtu.be/iQwQXVM6oiY[Youtube Link]

=== *Speaker*
Zach Tellman, software engineer at Conversational AI at Microsoft

=== *Thoughts*

Very provocative presentation. One day I will have the
ability to investigate more thoughtfully about my code and
language of choice.

Let's keep learning.

=== *Quotes*

*Referential transparency* assumes *infinite resources*

*Referential transparency* is *contextual*

*Correctness* is *contextual*

Performance is almost never the sum of its parts

=== *Recomendations*

1. We need to thinking like scientists when reasoning about
our systems. Hypothesis, experimentation and evidences.
2. using Java isn't cheating
3. if you can, do the hard work once
4. if you don't control the context, assume every bit matters
5. be curious about the tools you use
6. if you're going for a bounded solution, describe the boundaries fully
7. if you're going for a general solution, make sure it's actual general


=== *Links*

1. https://github.com/gtrak/no.disassemble/[no.disassemble library]
2. https://github.com/koluch/aphyr-clojure-book/raw/master/pdf/Kyle%20Kingsbury%20-%20Clojure%20from%20the%20ground%20up.pdf[Clojure from the ground up]
